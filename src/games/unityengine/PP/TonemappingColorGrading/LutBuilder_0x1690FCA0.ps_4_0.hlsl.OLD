
Texture2D<float4> t1 : register(t1);
Texture2D<float4> t0 : register(t0);
SamplerState s1_s : register(s1);
SamplerState s0_s : register(s0);
cbuffer cb0 : register(b0){
  float4 cb0[22];
}

#define cmp -

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r1.x = dot(float3(0.390404999,0.549941003,0.00892631989), r0.xyz);
  r1.y = dot(float3(0.070841603,0.963172019,0.00135775004), r0.xyz);
  r1.z = dot(float3(0.0231081992,0.128021002,0.936245024), r0.xyz);
  r0.xyz = cb0[13].xyz * r1.xyz;
  r1.x = dot(float3(2.85846996,-1.62879002,-0.0248910002), r0.xyz);
  r1.y = dot(float3(-0.210181996,1.15820003,0.000324280991), r0.xyz);
  r1.z = dot(float3(-0.0418119989,-0.118169002,1.06867003), r0.xyz);
  r0.xyz = log2(r1.xyz);
  r1.xyz = float3(1,1,1) + -r1.xyz;
  r0.xyz = cb0[15].xyz * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r0.xyz = cb0[14].xyz * r1.xyz + r0.xyz;
  r0.xyz = cb0[16].xyz * r0.xyz;
  r0.xyw = max(float3(0,0,0), r0.yzx);
  r1.x = step(r0.y, r0.x);
  r2.xy = r0.yx;
  r3.xy = -r2.xy + r0.xy;
  r2.zw = float2(-1.0, 2.0 / 3.0);
  r3.zw = float2(1,-1);
  r1.xyzw = r1.xxxx * r3.xyzw + r2.xyzw;
  r2.x = step(r1.x, r0.w);
  r0.xyz = r1.xyw;
  r1.xyw = r0.wyx;
  r1.xyzw = r1.xyzw + -r0.xyzw;
  r0.xyzw = r2.xxxx * r1.yxzw + r0.yxzw;
  r1.x = min(r0.w, r0.x);
  r1.x = -r1.x + r0.y;
  r1.y = r1.x * 6.0 + 0.0001;
  r0.w = r0.w + -r0.x;
  r0.w = r0.w / r1.y;
  r0.z = r0.z + r0.w;
  r0.z = cb0[18].x + abs(r0.z);
  r0.w = floor(r0.z);
  r0.z = r0.z + -r0.w;
  r1.yzw = float3(1.0, 2.0 / 3.0, 1.0 / 3.0) + r0.zzz;
  r1.yzw = frac(r1.yzw);
  r1.yzw = r1.yzw * float3(6,6,6) + float3(-3,-3,-3);
  r1.yzw = saturate(float3(-1,-1,-1) + abs(r1.yzw));
  r1.yzw = float3(-1,-1,-1) + r1.yzw;
  r0.z = 0.0001 + r0.y;
  r0.x = r1.x / r0.z;
  r0.xy = cb0[18].yz * r0.xy;
  r0.xzw = r0.xxx * r1.yzw + float3(1,1,1);
  r1.xyz = r0.yyy * r0.xzw;
  r1.w = max(r1.y, r1.z);
  r1.w = max(r1.x, r1.w);
  r2.x = min(r1.y, r1.z);
  r2.x = min(r2.x, r1.x);
  r1.w = -r2.x + r1.w;
  /*r2.x = cmp(0 < cb0[17].w);
  r2.y = cmp(cb0[17].w < 0);
  r2.x = (int)-r2.x + (int)r2.y;
  r2.x = (int)r2.x;*/
  r2.x = sign(cb0[17].w);
  r1.w = -r2.x * r1.w + 1;
  r1.w = cb0[17].w * r1.w + 1;
  r2.xyz = cb0[3].xyz * r1.xyz;
  r1.xy = r2.xx + r2.yz;
  r1.y = r2.y * r1.y;
  r1.x = r1.z * cb0[3].z + r1.x;
  r1.y = sqrt(r1.y);
  r1.y = dot(cb0[3].ww, r1.yy);
  r1.x = r1.x + r1.y;
  r0.xyz = r0.yyy * r0.xzw + -r1.xxx;
  r0.xyz = r1.www * r0.xyz + r1.xxx;
  r0.xyz = float3(-0.5,-0.5,-0.5) + r0.xyz;
  r0.xyz = saturate(r0.xyz * cb0[17].xxx + float3(0.5,0.5,0.5));
  r1.xyz = cmp(r0.xyz < float3(0.5,0.5,0.5));
  r2.xyz = float3(1,1,1) + -r0.xyz;
  r0.xyz = log2(r0.xyz);
  r0.xyz = cb0[17].yyy * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r2.xyz = log2(r2.xyz);
  r2.xyz = cb0[17].yyy * r2.xyz;
  r2.xyz = exp2(r2.xyz);
  r0.w = exp2(cb0[17].y);
  r0.w = 0.5 * r0.w;
  r2.xyz = -r2.xyz * r0.www + float3(1,1,1);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r1.xyz ? r0.xyz : r2.xyz;
  r0.xyz = log2(r0.xyz);
  r0.xyz = cb0[17].zzz * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r1.x = dot(r0.xyz, cb0[19].xyz);
  r1.yw = float2(0.5,0.5);
  r2.xyzw = t1.Sample(s1_s, r1.xy).xywz;
  r2.yw = float2(0.5,0.5);
  r3.xyzw = t1.Sample(s1_s, r2.zw).xyzw;
  o0.x = r3.x;
  r1.z = dot(r0.xyz, cb0[20].xyz);
  r2.x = dot(r0.xyz, cb0[21].xyz);
  r0.xyzw = t1.Sample(s1_s, r2.xy).xywz;
  r1.xyzw = t1.Sample(s1_s, r1.zw).xyzw;
  r0.x = r1.w;
  r0.yw = float2(0.5,0.5);
  r1.xyzw = t1.Sample(s1_s, r0.xy).xyzw;
  r0.xyzw = t1.Sample(s1_s, r0.zw).xyzw;
  o0.z = r0.z;
  o0.y = r1.y;
  o0.w = 1;
  return;
}