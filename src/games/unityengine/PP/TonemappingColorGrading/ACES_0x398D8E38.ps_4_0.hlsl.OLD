#include "../common.hlsl"

Texture2D<float4> t3 : register(t3);
Texture2D<float4> t2 : register(t2);
Texture2D<float4> t1 : register(t1);
Texture2D<float4> t0 : register(t0);
SamplerState s3_s : register(s3);
SamplerState s2_s : register(s2);
SamplerState s1_s : register(s1);
SamplerState s0_s : register(s0);
cbuffer cb0 : register(b0){
  float4 cb0[10];
}

float3 vanillaNarkACES(float3 color, float exposure) {
  const float a = 2.51f;
  const float b = 0.03f;
  const float c = 2.43f;
  const float d = 0.59f;
  const float e = 0.14f;
  float3 exposed_color = exposure * color;
  return (exposed_color * (a * exposed_color + b)) / (exposed_color * (c * exposed_color + d) + e);
}

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.z = cb0[9].y;
  r1.xyzw = t0.Sample(s1_s, v1.xy).xyzw;
  o0.w = r1.w;
  /*r2.xyz = cb0[4].yyy * r1.xyz;
  r3.xyz = r2.xyz * float3(2.50999999,2.50999999,2.50999999) + float3(0.0299999993,0.0299999993,0.0299999993);
  r3.xyz = r3.xyz * r2.xyz;
  r4.xyz = r2.xyz * float3(2.43000007,2.43000007,2.43000007) + float3(0.589999974,0.589999974,0.589999974);
  r2.xyz = r2.xyz * r4.xyz + float3(0.140000001,0.140000001,0.140000001);
  r2.xyz = saturate(r3.xyz / r2.xyz);*/
  float midGray1 = vanillaNarkACES(float3(0.18f, 0.18f, 0.18f), cb0[4].x).x;
  float3 hueCorrectionColor1 = vanillaNarkACES(r1.xyz, cb0[4].x);
  float midGray2 = vanillaNarkACES(float3(0.18f, 0.18f, 0.18f), cb0[4].y).x;
  float3 hueCorrectionColor2 = vanillaNarkACES(r1.xyz, cb0[4].y);
  renodx::tonemap::Config config = renodx::tonemap::config::Create();
  config.type = min(3, injectedData.toneMapType);
  config.peak_nits = injectedData.toneMapPeakNits;
  config.game_nits = injectedData.toneMapGameNits;
  config.gamma_correction = injectedData.toneMapGammaCorrection;
  config.exposure = injectedData.colorGradeExposure;
  config.highlights = injectedData.colorGradeHighlights;
  config.shadows = injectedData.colorGradeShadows;
  config.contrast = injectedData.colorGradeContrast;
  config.saturation = injectedData.colorGradeSaturation;
  config.mid_gray_value = midGray2;
  config.mid_gray_nits = midGray2 * 100;
  config.reno_drt_shadows = 0.95f;
  config.reno_drt_contrast = 1.45f;
  config.reno_drt_dechroma = injectedData.colorGradeDechroma;
  config.reno_drt_flare = 0.10f * pow(injectedData.colorGradeFlare, 10.f);
  config.hue_correction_type = injectedData.toneMapPerChannel != 0.f ? renodx::tonemap::config::hue_correction_type::INPUT
                                                                     : renodx::tonemap::config::hue_correction_type::CUSTOM;
  config.hue_correction_strength = injectedData.toneMapHueCorrection;
  config.hue_correction_color = lerp(r1.xyz, hueCorrectionColor2, injectedData.toneMapHueShift);
  config.reno_drt_hue_correction_method = (int)injectedData.toneMapHueProcessor;
  config.reno_drt_tone_map_method = injectedData.toneMapType == 3.f ? renodx::tonemap::renodrt::config::tone_map_method::REINHARD
                                                                    : renodx::tonemap::renodrt::config::tone_map_method::DANIELE;
  config.reno_drt_per_channel = injectedData.toneMapPerChannel != 0.f;
  config.reno_drt_blowout = 1.f - injectedData.colorGradeBlowout;
  config.reno_drt_white_clip = injectedData.colorGradeClip == 0.f ? 8.0f / cb0[4].y : injectedData.colorGradeClip;
  if(injectedData.toneMapType == 0.f){
    r2.xyz = saturate(hueCorrectionColor2);
    r1.xyz = saturate(hueCorrectionColor1);
  }
  r2.xyz = renodx::tonemap::config::Apply(r1.xyz, config);
  /*r1.xyz = cb0[4].xxx * r1.xyz;
  r3.xyz = r1.xyz * float3(2.50999999,2.50999999,2.50999999) + float3(0.0299999993,0.0299999993,0.0299999993);
  r3.xyz = r3.xyz * r1.xyz;
  r4.xyz = r1.xyz * float3(2.43000007,2.43000007,2.43000007) + float3(0.589999974,0.589999974,0.589999974);
  r1.xyz = r1.xyz * r4.xyz + float3(0.140000001,0.140000001,0.140000001);
  r1.xyz = saturate(r3.xyz / r1.xyz);*/
  config.mid_gray_value = midGray1;
  config.mid_gray_nits = midGray1 * 100;
  config.hue_correction_color = lerp(r1.xyz, hueCorrectionColor1, injectedData.toneMapHueShift);
  config.reno_drt_white_clip = injectedData.colorGradeClip == 0.f ? 8.0f / cb0[4].x : injectedData.colorGradeClip;
  r1.xyz = renodx::tonemap::config::Apply(r1.xyz, config);
  r3.xyzw = t1.Sample(s0_s, v1.xy).xyzw;
  /*r2.xyz = r2.xyz + -r1.xyz;
  r1.xyz = r3.xxx * r2.xyz + r1.xyz;*/
  r1.xyz = lerp(r1.xyz, r2.xyz, r3.x);
  /*r2.xyz = max(float3(0,0,0), r1.zxy);
  r2.xyz = log2(r2.xyz);
  r2.xyz = float3(0.416666657,0.416666657,0.416666657) * r2.xyz;
  r2.xyz = exp2(r2.xyz);
  r2.xyz = saturate(r2.xyz * float3(1.05499995,1.05499995,1.05499995) + float3(-0.0549999997,-0.0549999997,-0.0549999997));
  r3.yzw = cb0[9].zzz * r2.xyz;
  r1.w = floor(r3.y);
  r4.xy = float2(0.5,0.5) * cb0[9].xy;
  r4.yz = r3.zw * cb0[9].xy + r4.xy;
  r4.x = r1.w * cb0[9].y + r4.y;
  r1.w = r2.x * cb0[9].z + -r1.w;
  r0.yw = float2(0,0);
  r0.zw = r4.xz + r0.zw;
  r4.xyzw = t3.Sample(s3_s, r4.xz).xyzw;
  r5.xyzw = t3.Sample(s3_s, r0.zw).xyzw;
  r3.yzw = r5.xyz + -r4.xyz;
  r3.yzw = r1.www * r3.yzw + r4.xyz;
  r4.xyz = r3.yzw * float3(0.305306017,0.305306017,0.305306017) + float3(0.682171106,0.682171106,0.682171106);
  r4.xyz = r3.yzw * r4.xyz + float3(0.0125228781,0.0125228781,0.0125228781);
  r4.xyz = r3.yzw * r4.xyz;*/
  r4.xyz = handleUserLUT(r1.xyz, t3, s3_s, cb0[9].xyz, 1, true);
  /*r3.yzw = r4.xyz + -r1.xyz;
  r3.yzw = cb0[9].www * r3.yzw + r1.xyz;*/
  r3.yzw = lerp(r1.xyz, r4.xyz, cb0[9].w);
  /*r2.yzw = cb0[8].zzz * r2.xyz;
  r0.zw = float2(0.5,0.5) * cb0[8].xy;
  r4.yz = r2.zw * cb0[8].xy + r0.zw;
  r0.z = floor(r2.y);
  r4.x = r0.z * cb0[8].y + r4.y;
  r0.z = r2.x * cb0[8].z + -r0.z;
  r0.x = cb0[8].y;
  r0.xy = r4.xz + r0.xy;
  r2.xyzw = t2.Sample(s2_s, r4.xz).xyzw;
  r4.xyzw = t2.Sample(s2_s, r0.xy).xyzw;
  r0.xyw = r4.xyz + -r2.xyz;
  r0.xyz = r0.zzz * r0.xyw + r2.xyz;
  r2.xyz = r0.xyz * float3(0.305306017,0.305306017,0.305306017) + float3(0.682171106,0.682171106,0.682171106);
  r2.xyz = r0.xyz * r2.xyz + float3(0.0125228781,0.0125228781,0.0125228781);
  r2.xyz = r0.xyz * r2.xyz;*/
  r2.xyz = handleUserLUT(r1.xyz, t2, s2_s, cb0[8].xyz, 1, true);
  /*r0.xyz = r2.xyz + -r1.xyz;
  r0.xyz = cb0[8].www * r0.xyz + r1.xyz;*/
  r0.xyz = lerp(r1.xyz, r2.xyz, cb0[8].w);
  /*r1.xyz = r3.yzw + -r0.xyz;
  r0.xyz = r3.xxx * r1.xyz + r0.xyz;*/
  r0.xyz = lerp(r0.xyz, r3.yzw, r3.x);
  if (injectedData.countOld == injectedData.countNew) {
    r0.xyz = PostToneMapScale(r0.xyz);
  }
  o0.xyz = r0.xyz;
  return;
}