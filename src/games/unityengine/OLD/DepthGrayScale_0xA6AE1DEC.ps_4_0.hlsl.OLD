#include "../../tonemap.hlsl"

Texture2D<float4> t1 : register(t1);
Texture2D<float4> t0 : register(t0);
SamplerState s1_s : register(s1);
SamplerState s0_s : register(s0);
cbuffer cb1 : register(b1){
  float4 cb1[7];
}
cbuffer cb0 : register(b0){
  float4 cb0[4];
}

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.z = 0;
  r1.xy = float2(1,1) / cb1[6].yx;
  r0.xy = cb0[2].xx * -r1.xy;
  r1.xy = cb0[2].xx * r1.yx;
  r0.xyzw = v1.xyxy + r0.zxyz;
  r2.xyzw = t1.Sample(s0_s, r0.xy).xyzw;
  r0.xyzw = t1.Sample(s0_s, r0.zw).xyzw;
  r3.xyz = r2.xyz * float3(3.55539989,3.55539989,0) + float3(-1.77769995,-1.77769995,1);
  r1.w = dot(r2.zw, float2(1,0.00392156886));
  r2.x = dot(r3.xyz, r3.xyz);
  r2.x = 2 / r2.x;
  r3.xy = r2.xx * r3.xy;
  r3.z = -1 + r2.x;
  r2.xyzw = t1.Sample(s0_s, v1.xy).xyzw;
  r4.xyz = r2.xyz * float3(3.55539989,3.55539989,0) + float3(-1.77769995,-1.77769995,1);
  r2.x = dot(r2.zw, float2(1,0.00392156886));
  r2.x = cb1[5].z * r2.x;
  r2.y = dot(r4.xyz, r4.xyz);
  r2.y = 2 / r2.y;
  r4.xy = r2.yy * r4.xy;
  r4.z = -1 + r2.y;
  r2.y = dot(r4.xyz, r3.xyz);
  r2.y = 1 + -r2.y;
  r2.y = cb0[2].y * r2.y;
  r1.z = 0;
  r3.xyzw = v1.xyxy + r1.xzzy;
  r5.xyzw = t1.Sample(s0_s, r3.xy).xyzw;
  r3.xyzw = t1.Sample(s0_s, r3.zw).xyzw;
  r1.xyz = r5.xyz * float3(3.55539989,3.55539989,0) + float3(-1.77769995,-1.77769995,1);
  r2.z = dot(r5.zw, float2(1,0.00392156886));
  r2.z = -r2.z * cb1[5].z + r2.x;
  r1.z = dot(r1.xyz, r1.xyz);
  r1.z = 2 / r1.z;
  r5.xy = r1.zz * r1.xy;
  r5.z = -1 + r1.z;
  r1.x = dot(r4.xyz, r5.xyz);
  r1.x = 1 + -r1.x;
  r1.x = r1.x * cb0[2].y + r2.y;
  r5.xyz = r0.xyz * float3(3.55539989,3.55539989,0) + float3(-1.77769995,-1.77769995,1);
  r0.x = dot(r0.zw, float2(1,0.00392156886));
  r0.x = -r0.x * cb1[5].z + r2.x;
  r0.y = dot(r5.xyz, r5.xyz);
  r0.y = 2 / r0.y;
  r5.xy = r0.yy * r5.xy;
  r5.z = -1 + r0.y;
  r0.y = dot(r4.xyz, r5.xyz);
  r0.y = 1 + -r0.y;
  r0.y = r0.y * cb0[2].y + r1.x;
  r1.xyz = r3.xyz * float3(3.55539989,3.55539989,0) + float3(-1.77769995,-1.77769995,1);
  r0.z = dot(r3.zw, float2(1,0.00392156886));
  r0.z = -r0.z * cb1[5].z + r2.x;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = 2 / r0.w;
  r1.xy = r0.ww * r1.xy;
  r1.z = -1 + r0.w;
  r0.w = dot(r4.xyz, r1.xyz);
  r0.w = 1 + -r0.w;
  r0.y = r0.w * cb0[2].y + r0.y;
  r0.w = -r1.w * cb1[5].z + r2.x;
  r1.x = saturate(0.1 * r2.x);
  r0.w = r2.z + r0.w;
  r0.x = r0.w + r0.x;
  r0.x = r0.x + r0.z;
  r0.x = saturate(r0.x * r0.x + r0.y);
  r0.x = cb0[2].z * r0.x;
  r0.y = r1.x * -2 + 3;
  r0.z = r1.x * r1.x;
  r0.y = -r0.y * r0.z + 1;
  r0.x = r0.x * r0.y;
  r1.xyzw = t0.Sample(s1_s, v1.xy).xyzw;
  r2.xyzw = cb0[3].xyzw + -r1.xyzw;
  o0.xyzw = r0.xxxx * r2.xyzw + r1.xyzw;
  if(injectedData.gammaSpace != 0.f){
    o0.xyz = renodx::color::srgb::DecodeSafe(o0.xyz);
  }
  if (injectedData.tonemapCheck == 1.f && (injectedData.count2Old == injectedData.count2New)) {
    o0.xyz = applyUserNoTonemap(o0.xyz);
  }
  if (injectedData.countOld == injectedData.countNew) {
    o0.xyz = PostToneMapScale(o0.xyz, injectedData.gammaSpace != 0.f);
  } else if(injectedData.gammaSpace != 0.f){
    o0.xyz = renodx::color::srgb::EncodeSafe(o0.xyz);
  }
  return;
}