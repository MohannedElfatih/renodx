#include "../common.hlsl"

Texture2D<float4> t4 : register(t4);
Texture2D<float4> t3 : register(t3);
Texture2D<float4> t2 : register(t2);
Texture2D<float4> t1 : register(t1);
Texture2D<float4> t0 : register(t0);
SamplerState s4_s : register(s4);
SamplerState s3_s : register(s3);
SamplerState s2_s : register(s2);
SamplerState s1_s : register(s1);
SamplerState s0_s : register(s0);
cbuffer cb1 : register(b1){
  float4 cb1[8];
}
cbuffer cb0 : register(b0){
  float4 cb0[73];
}

float3 vanillaExp(float3 input){
float3 r0;
  r0.xyz = input;
  r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.xyz = min(float3(1000,1000,1000), r0.xyz);
  r0.xyz = float3(0.01575,0.01575,0.01575) + -r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r0.xyz = float3(1,1,1) + -r0.xyz;
return r0.xyz;
}

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = saturate(cb0[71].x);
  r1.xyzw = t2.SampleLevel(s0_s, v1.xy, 0).xyzw;
  r0.y = cb1[7].z * r1.x + cb1[7].w;
  r0.y = 1 / r0.y;
  r0.zw = cb0[71].xx * float2(-152,-710) + float2(160,800);
  r1.x = -r0.z * 2 + r0.y;
  r0.y = r0.y + -r0.z;
  r0.y = saturate(r0.y / r0.w);
  r0.z = r0.w + r0.w;
  r0.z = saturate(r1.x / r0.z);
  r0.w = saturate(cb0[70].w * 2 + -1);
  r0.x = r0.x * r0.z + r0.w;
  r0.x = min(1, r0.x);
  r0.zw = cb0[69].xy * float2(-2,2) + v1.xy;
  r1.xyzw = t3.Sample(s4_s, r0.zw).xyzw;
  r2.xyzw = t1.Sample(s2_s, r0.zw).xyzw;
  r3.xyzw = t0.Sample(s1_s, v1.xy).xyzw;
  r1.xyz = -r3.xyz + r1.xyz;
  r0.yzw = r0.yyy * r1.xyz + r3.xyz;
  r1.xyz = r2.xyz + -r0.yzw;
  r0.xyz = r0.xxx * r1.xyz + r0.yzw;
  r0.xyz = r2.xyz * cb0[71].yyy * injectedData.fxBloom + r0.xyz;
  r1.xyzw = t4.Sample(s3_s, float2(0.5,0.5)).xyzw;
  r0.xyz = r1.xyz * r0.xyz;
  r1.xy = float2(-0.5,-0.5) + v1.xy;
  r1.zw = float2(0.3125,0.527777791) * cb1[6].xy;
  r1.x = dot(r1.xy, r1.zw);
  r1.x = frac(r1.x);
  r0.w = 0.000980392215;
  r1.xyz = r1.xxx * float3(-0.00196078443,0.00196078443,-0.00196078443) + r0.wyw;
  r0.y = -0.000980392215;
  r0.xyz = r0.xyz + r1.xyz;
  /*r0.xyz = max(float3(0,0,0), r0.xyz);
  r0.xyz = min(float3(1000,1000,1000), r0.xyz);
  r0.xyz = float3(0.01575,0.01575,0.01575) + -r0.xyz;
  r0.xyz = exp2(r0.xyz);
  r0.xyz = float3(1,1,1) + -r0.xyz;
  r0.xyz = max(float3(0,0,0), r0.xyz);*/
  float midGray = vanillaExp(float3(0.18f, 0.18f, 0.18f)).x;
  float3 hueCorrectionColor = vanillaExp(r0.xyz);
  renodx::tonemap::Config config = renodx::tonemap::config::Create();
  config.type = min(3, injectedData.toneMapType);
  config.peak_nits = injectedData.toneMapPeakNits;
  config.game_nits = injectedData.toneMapGameNits;
  config.gamma_correction = injectedData.toneMapGammaCorrection;
  config.exposure = injectedData.colorGradeExposure;
  config.highlights = injectedData.colorGradeHighlights;
  config.shadows = injectedData.colorGradeShadows;
  config.contrast = injectedData.colorGradeContrast;
  config.saturation = injectedData.colorGradeSaturation;
  config.reno_drt_dechroma = injectedData.colorGradeDechroma;
  config.reno_drt_blowout = 1.f - injectedData.colorGradeBlowout;
  config.mid_gray_value = midGray;
  config.mid_gray_nits = midGray * 100;
  config.reno_drt_flare = 0.10f * pow(injectedData.colorGradeFlare, 10.f);
  config.hue_correction_type = injectedData.toneMapPerChannel != 0.f ? renodx::tonemap::config::hue_correction_type::INPUT
                                                                     : renodx::tonemap::config::hue_correction_type::CUSTOM;
  config.hue_correction_strength = injectedData.toneMapHueCorrection;
  config.hue_correction_color = lerp(r0.xyz, hueCorrectionColor, injectedData.toneMapHueShift);
  config.reno_drt_hue_correction_method = (int)injectedData.toneMapHueProcessor;
  config.reno_drt_tone_map_method = injectedData.toneMapType == 3.f ? renodx::tonemap::renodrt::config::tone_map_method::REINHARD
                                                                    : renodx::tonemap::renodrt::config::tone_map_method::DANIELE;
  config.reno_drt_per_channel = injectedData.toneMapPerChannel != 0.f;
  config.reno_drt_white_clip = injectedData.colorGradeClip == 0.f ? 7.f : injectedData.colorGradeClip;
  if (config.type == 0.f) {
    r0.xyz = saturate(hueCorrectionColor);
  }
  r0.xyz = renodx::tonemap::config::Apply(r0.xyz, config);
  if(injectedData.toneMapType == 0.f){
  r0.xyz = log2(r0.xyz);
  r0.xyz = cb0[72].www * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  } else {
    r0.xyz = renodx::math::SignPow(r0.xyz, cb0[72].w);
  }
  r1.xyz = float3(1.5,1.5,1.5) * r0.xyz;
  r2.xy = v1.xy * float2(2,2) + float2(-1,-1);
  r2.xy = float2(0.65,0.65) * r2.xy;
  r0.w = dot(r2.xy, r2.xy);
  r0.w = 1 + -r0.w;
  r0.w = max(0, r0.w);
  r0.w = r0.w * r0.w + -1;
  r0.w = r0.w * 0.99 + 1;
  r2.xyz = r1.xyz * r0.www;
  r0.xyz = r0.xyz * float3(1.5,1.5,1.5) + -r2.xyz;
  o0.xyz = r1.xyz * r0.xyz + r2.xyz;
  o0.w = 1;
  return;
}