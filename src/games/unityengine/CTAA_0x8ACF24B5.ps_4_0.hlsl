#include "shared.h"

Texture2D<float4> t2 : register(t2);
Texture2D<float4> t1 : register(t1);
Texture2D<float4> t0 : register(t0);
SamplerState s2_s : register(s2);
SamplerState s1_s : register(s1);
SamplerState s0_s : register(s0);
cbuffer cb0 : register(b0){
  float4 cb0[7];
}

#define cmp -

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 0;
  r0.y = cb0[2].y;
  r0.xy = v1.xy + r0.xy;
  r0.xyzw = t1.Sample(s0_s, r0.xy).xyzw;
  r1.xy = r0.yx + r0.yz;
  r1.x = r1.x + r1.y;
  r1.x = r1.x * cb0[4].z + 4;
  r1.x = 1 / r1.x;
  r0.xyz = r1.xxx * r0.xyz;
  r1.z = 0;
  r1.xyw = -cb0[2].xyy;
  r1.xyzw = v1.xyxy + r1.xyzw;
  r2.xyzw = t1.Sample(s0_s, r1.xy).xyzw;
  r1.xyzw = t1.Sample(s0_s, r1.zw).xyzw;
  r3.xy = r1.yx + r1.yz;
  r3.x = r3.x + r3.y;
  r3.x = r3.x * cb0[4].z + 4;
  r3.x = 1 / r3.x;
  r1.xyz = r3.xxx * r1.xyz;
  r3.x = -cb0[2].x;
  r3.yw = float2(0,0);
  r3.xy = v1.xy + r3.xy;
  r4.xyzw = t1.Sample(s0_s, r3.xy).xyzw;
  r3.xy = r4.yx + r4.yz;
  r3.x = r3.x + r3.y;
  r3.x = r3.x * cb0[4].z + 4;
  r3.x = 1 / r3.x;
  r4.xyz = r4.xyz * r3.xxx;
  r5.xyz = min(r4.xyz, r1.xyz);
  r3.z = cb0[2].x;
  r3.xy = v1.xy + r3.zw;
  r3.xyzw = t1.Sample(s0_s, r3.xy).xyzw;
  r6.xy = r3.yx + r3.yz;
  r5.w = r6.x + r6.y;
  r5.w = r5.w * cb0[4].z + 4;
  r5.w = 1 / r5.w;
  r3.xyz = r5.www * r3.xyz;
  r6.xyzw = t1.Sample(s0_s, v1.xy).xyzw;
  r7.xy = r6.yx + r6.yz;
  r5.w = r7.x + r7.y;
  r5.w = r5.w * cb0[4].z + 4;
  r5.w = 1 / r5.w;
  r7.xyz = r6.xyz * r5.www;
  r8.xyz = min(r7.xyz, r3.xyz);
  r5.xyz = min(r8.xyz, r5.xyz);
  r5.xyz = min(r5.xyz, r0.xyz);
  r8.xy = r2.yx + r2.yz;
  r8.x = r8.x + r8.y;
  r8.x = r8.x * cb0[4].z + 4;
  r8.x = 1 / r8.x;
  r2.xyz = r8.xxx * r2.xyz;
  r8.xyzw = r2.xyzw + r1.xyzw;
  r1.xyz = max(r4.xyz, r1.xyz);
  r9.xyzw = cb0[2].xyxy * float4(1,-1,-1,1) + v1.xyxy;
  r10.xyzw = t1.Sample(s0_s, r9.xy).xyzw;
  r9.xyzw = t1.Sample(s0_s, r9.zw).xyzw;
  r11.xy = r10.yx + r10.yz;
  r1.w = r11.x + r11.y;
  r1.w = r1.w * cb0[4].z + 4;
  r1.w = 1 / r1.w;
  r10.xyz = r10.xyz * r1.www;
  r8.xyzw = r10.xyzw + r8.xyzw;
  r4.xyzw = r8.xyzw + r4.xyzw;
  r8.xyz = min(r10.xyz, r2.xyz);
  r2.xyz = max(r10.xyz, r2.xyz);
  r10.xy = r9.yx + r9.yz;
  r1.w = r10.x + r10.y;
  r1.w = r1.w * cb0[4].z + 4;
  r1.w = 1 / r1.w;
  r9.xyz = r9.xyz * r1.www;
  r10.xy = cb0[2].xy + v1.xy;
  r10.xyzw = t1.Sample(s0_s, r10.xy).xyzw;
  r11.xy = r10.yx + r10.yz;
  r1.w = r11.x + r11.y;
  r1.w = r1.w * cb0[4].z + 4;
  r1.w = 1 / r1.w;
  r10.xyz = r10.xyz * r1.www;
  r11.xyz = min(r10.xyz, r9.xyz);
  r8.xyz = min(r11.xyz, r8.xyz);
  r8.xyz = min(r8.xyz, r5.xyz);
  r8.xyz = float3(0.5,0.5,0.5) * r8.xyz;
  r5.xyz = r5.xyz * float3(0.5,0.5,0.5) + r8.xyz;
  r8.xyz = max(r10.xyz, r9.xyz);
  r2.xyz = max(r8.xyz, r2.xyz);
  r8.xyz = max(r7.xyz, r3.xyz);
  r1.xyz = max(r8.xyz, r1.xyz);
  r1.xyz = max(r1.xyz, r0.xyz);
  r2.xyz = max(r2.xyz, r1.xyz);
  r2.xyz = float3(0.5,0.5,0.5) * r2.xyz;
  r1.xyz = r1.xyz * float3(0.5,0.5,0.5) + r2.xyz;
  r2.xyz = min(r5.xyz, r1.xyz);
  r7.w = r6.w;
  r4.xyzw = r7.xyzw + r4.xyzw;
  r3.xyzw = r4.xyzw + r3.xyzw;
  r3.xyzw = r3.xyzw + r9.xyzw;
  r0.xyzw = r3.xyzw + r0.xyzw;
  r0.xyzw = r0.xyzw + r10.xyzw;
  r3.xyzw = float4(0.111111112,0.111111112,0.111111112,0.111111112) * r0.xyzw;
  r2.xyz = min(r3.xyz, r2.xyz);
  r4.xyz = max(r5.xyz, r1.xyz);
  r5.xy = r5.yx + r5.yz;
  r0.w = r5.x + r5.y;
  r1.xy = r1.yx + r1.yz;
  r1.x = r1.x + r1.y;
  r0.w = r1.x + -r0.w;
  r1.xyz = max(r4.xyz, r3.xyz);
  r2.xyz = r1.xyz + r2.xyz;
  r4.xy = cb0[6].zw + -cb0[6].xy;
  r7.xyzw = t0.Sample(s2_s, v1.xy).xyzw;
  r2.w = dot(r7.xy, r7.xy);
  r2.w = sqrt(r2.w);
  r4.z = 1000000 * r2.w;
  r2.w = saturate(cb0[3].w * r2.w);
  r4.z = min(1, r4.z);
  r4.xy = r4.zz * r4.xy + cb0[6].xy;
  r4.xy = cb0[5].x < 0.5 ? float2(0.5,1) : r4.xy;
  r1.xyz = -r2.xyz * r4.xxx + r1.xyz;
  r1.w = cb0[4].y * r4.y;
  r4.xy = v1.xy + -r7.xy;
  r4.xyzw = t2.Sample(s1_s, r4.xy).xyzw;
  r5.xy = r4.yx + r4.yz;
  r5.x = r5.x + r5.y;
  r5.x = r5.x * cb0[4].z + 4;
  r5.x = 1 / r5.x;
  r5.xyz = r5.xxx * r4.xyz;
  r2.xyz = -r2.xyz * float3(0.5,0.5,0.5) + r5.xyz;
  r8.xyz = -r2.xyz + r1.xyz;
  r1.xyz = -r2.xyz + -r1.xyz;
  r0.xyz = r0.xyz * float3(0.111111112,0.111111112,0.111111112) + -r5.xyz;
  r2.xyz = float3(1,1,1) / r0.xyz;
  r8.xyz = r8.xyz * r2.xyz;
  r1.xyz = r2.xyz * r1.xyz;
  r1.xyz = min(r8.xyz, r1.xyz);
  r1.x = max(r1.x, r1.y);
  r1.x = saturate(max(r1.x, r1.z));
  r1.y = min(abs(r0.x), abs(r0.y));
  r1.y = min(r1.y, abs(r0.z));
  r1.x = r1.y >= 1.52587891e-05 ? r1.x : 1;
  r4.xyz = r1.xxx * r0.xyz + r5.xyz;
  r0.xy = r5.yx + r5.yz;
  r0.x = r0.x + r0.y;
  r1.xyz = r6.xyz * r5.www + -r3.xyz;
  r0.y = r0.w * cb0[4].w + 1;
  r0.z = r0.x + r0.w;
  r0.z = 1 / r0.z;
  r0.y = 1 / r0.y;
  r0.w = abs(r7.x) + abs(r7.y);
  r2.xy = r7.xy * r7.xy;
  r2.x = dot(r2.xy, r2.xy);
  r2.x = sqrt(r2.x);
  r2.x = saturate(-r2.x * 90 + 2);
  r1.w = r2.x * r1.w;
  r1.w = 1 / r1.w;
  r0.w = min(1, r0.w);
  r0.y = saturate(r0.w * 0.5 + r0.y);
  r3.xyz = r0.yyy * r1.xyz + r3.xyz;
  r3.xyzw = r3.xyzw + -r4.xyzw;
  r0.y = r0.w * r1.w + r1.w;
  r0.xw = r0.xw * r0.yy;
  r0.y = r0.w * 4 + 1;
  r0.x = r0.x * r0.y;
  r0.x = saturate(r0.x * r0.z);
  r0.y = sqrt(r0.x);
  r0.y = r0.y + -r0.x;
  r0.x = r2.w * r0.y + r0.x;
  r0.xyzw = r0.xxxx * r3.xyzw + r4.xyzw;
  r1.xy = r0.yx + r0.yz;
  r1.x = r1.x + r1.y;
  r1.x = r1.x * -cb0[4].z + 1;
  r1.x = 1 / r1.x;
  r1.x = 4 * r1.x;
  o0.xyz = r1.xxx * r0.xyz;
  o0.w = r0.w;
  if(injectedData.toneMapType == 0.f){
  o0.xyz = min(float3(0,0,0), -o0.xyz);
  o0.xyz = -o0.xyz;
  }
  return;
}